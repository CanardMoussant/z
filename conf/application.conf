# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="changeme"

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.user=sa
# db.default.password=""

slick.dbs.default.driver="slick.driver.PostgresDriver$"

slick.dbs.default.db.maxConnections=20
slick.dbs.default.db.driver="org.postgresql.Driver"
slick.dbs.default.db.url="jdbc:postgresql://localhost:5432/gifter3"
slick.dbs.default.user = "epot"


play.modules.enabled += "modules.BaseModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

redis.uri = "redis://localhost:6379"

# https://stackoverflow.com/questions/45558233/getting-cors-errors-in-scala-play-framework-v2-6-x
play.filters.cors {
  #other cors configuration
  allowedHttpHeaders = ["Accept", "Content-Type"]
}

play.allowGlobalApplication = true

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}

# The URL to the UI in dev mode
ui.dev.url = "http://localhost:4200"

# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"
#play.filters.csrf.header.protectHeaders = null
#play.filters.csrf.header.bypassHeaders {
#  X-Requested-With = "*"
#  Csrf-Token = "nocheck"
#}
play.filters.headers.contentSecurityPolicy = "default-src 'self'; img-src 'self' data: fbcdn-profile-a.akamaihd.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com; style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com; font-src 'self' data: fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' clef.io; connect-src 'self' http://localhost:4200 ws://localhost:4200 ws://localhost:9000 ws://giftyou.herokuapp.com accounts.google.com twitter.com *.xing.com; frame-src clef.io"

#Security Filter Configuration - CORS
play.filters.cors {
  allowedOrigins = ["http://localhost:9000", ${ui.dev.url}]
}
play.filters.csrf.bypassCorsTrustedOrigins = false
play.filters.csrf.cookie.name="PLAY_CSRF_TOKEN" // We store the CSRF token in a cookie instead of the session so that UI app can read it
play.filters.csrf.contentType.blackList=[ // We would also check AJAX requests from type application/json
  "application/x-www-form-urlencoded",
  "multipart/form-data",
  "text/plain",
  "application/json"
]

play.i18n.langs=["fr", "en"]

# Play mailer
play.mailer {
  host = "smtp.sendgrid.net"
  port = 587
  tls = true
  user = ""
  user = ${?SENDGRID_USERNAME}
  password = ""
  password = ${?SENDGRID_PASSWORD}
  mock=true
}

sender = "replacemewithavalidsender"
sender = ${?SENDGRID_SENDER}

play.http.secret.key="changeme"
play.http.secret.key=${?APPLICATION_SECRET}

include "silhouette.conf"
